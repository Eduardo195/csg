const path = require('path');
var express = require('express');
const bodyParser = require('body-parser');
var passport = require('passport');
var LocalStrategy = require('passport-local').Strategy;
const local = require('./auth/local');

const PORT = 3000;

// Configure the local strategy for use by Passport.
//
// The local strategy require a `verify` function which receives the credentials
// (`username` and `password`) submitted by the user.  The function must verify
// that the password is correct and then invoke `cb` with a user object, which
// will be set at `req.user` in route handlers after authentication.
// passport.use(new LocalStrategy(
//   function(username, password, cb) {
//     local.findByUsername(username, function(err, user) {
//       if (err) { return cb(err); }
//       if (!user) { return cb(null, false); }
//       if (user.password != password) { return cb(null, false); }
//       return cb(null, user);
//     });
//   }));


passport.use('local-login', new LocalStrategy(
    {passReqToCallback : true}, //allows us to pass back the request to the callback
    (req, username, password, done) => {
      local.login(username, password).then((user) => {
        console.log('USER: ', user);
        done(null, user);
      }).catch(function (err){
        console.log('Failed to login', err);
      });
    })
);

passport.use('local-register', new LocalStrategy(
    {passReqToCallback : true}, //allows us to pass back the request to the callback
    (req, username, password, done) => {
      local.register(username, password).then((user) => {
        console.log('USER: ', user);
        done(null, user);
      }).catch(function (err){
        console.log('FAILED TO REGISTEER', err);
        // console.log(err.body);
      });
    })
);


// Configure Passport authenticated session persistence.
//
// In order to restore authentication state across HTTP requests, Passport needs
// to serialize users into and deserialize users out of the session.  The
// typical implementation of this is as simple as supplying the user ID when
// serializing, and querying the user record by ID from the database when
// deserializing.
passport.serializeUser(function(user, cb) {
  console.log('serializing', user, cb);
  cb(null, user._id);
});

passport.deserializeUser(function(id, cb) {
  console.log(`deserializing ${id}`);
  local.findById(id).then(user => {
    console.log(`user ::::`, user);
    if(user){
      cb(null, user);
    } else {
      cb('USER NOUT FOUND')
    }
  });
});

// Create a new Express application.
var app = express();

// Configure view engine to render EJS templates.
app.use(express.static(path.join(__dirname, '../public')));
app.use(bodyParser.json()); // support json encoded bodies
app.use(bodyParser.urlencoded({ extended: true })); // support encoded bodies

// Use application-level middleware for common functionality, including
// logging, parsing, and session handling.
// app.use(require('morgan')('combined'));
app.use(require('cookie-parser')());
// app.use(require('body-parser').urlencoded({ extended: true }));
app.use(require('express-session')({ secret: 'keyboard cat', resave: false, saveUninitialized: false }));

// Initialize Passport and restore authentication state, if any, from the
// session.
app.use(passport.initialize());
app.use(passport.session());

// Define routes.
app.get('/', (req, res) => {
  console.log('req.session :::', req.session);
  console.log(req.isAuthenticated());
  res.sendFile(path.join(__dirname, '/public/index.html'));
});

app.post('/api/session',
    require('connect-ensure-login').ensureLoggedIn(),
    (req, res) => {
      // res.send({ user: req.user });
      console.log('req.session :::', req.session);
      console.log('req.user :::', req.user);
      const session = {};
      res.send(session);
    }
);

app.post('/api/login', passport.authenticate('local-login'),
  (req, res) => {
    console.log('returning user details', req.user);
    res.send(req.user);
  }
);

app.post('/api/register', passport.authenticate('local-register'),(req, res) => {
  console.log(req.session);
  console.log(req.isAuthenticated());
  res.send({ status: 'what' });
});

app.get('/api/logout',
  function(req, res){
    req.logout();
    res.send({ status: true });
  }
);

app.get('/api/profile',
  require('connect-ensure-login').ensureLoggedIn(),
  (req, res) => {
    res.send({ user: req.user });
  }
);

app.listen(3000);
